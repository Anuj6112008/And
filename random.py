import os
os.system('pip install pycryptodome')    
import base64, zlib, marshal, hashlib
from Crypto.Cipher import AES

def pad(s): return s + (16 - len(s) % 16) * chr(16 - len(s) % 16)
def unpad(s): return s[:-ord(s[-1])]
def xor_decrypt(data, key):
    return ''.join(chr(ord(c) ^ ord(key[i % len(key)])) for i, c in enumerate(data))

coder_factory = base64.b64decode('')
key = hashlib.sha256('my_secret_key_123'.encode()).digest()
cipher = AES.new(key, AES.MODE_ECB)
decrypted = cipher.decrypt(coder_factory).decode('latin1')
xor_decoded = xor_decrypt(decrypted, 'secret')
exec(marshal.loads(zlib.decompress(xor_decoded.encode('latin1'))))
